{"ast":null,"code":"import { ADD_USER_PENDING, ADD_USER_SUCCESS, ADD_USER_ERROR, FETCH_USERS, IS_AUTH, LOGIN_USER_PENDING, LOGIN_USER_SUCCESS, LOGIN_USER_ERROR, USER_LOGOUT } from \"./types\";\nexport const logIn = data => {\n  return dispatch => {\n    //ACA LE DECIMOS AL REDUCER QUE LE DIGA AL STORE QUE VAMOS A LOGAR --> REDUCER\n    dispatch({\n      type: LOGIN_USER_PENDING\n    }); //CREAMOS UNA CONSTANTE OPTIONS, LA CUAL VA A TENER TODA LA INFO NECESARIA PARA PEGARLE A LA BASE DE DATOS\n\n    const options = {\n      timeout: 25000,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      //GUARDAMOS LA CONTRASEÑA Y EL NOMBRE QUE PUSIERON EN EL FRONT ADENTRO DEL BODY DE OPTIONS\n      body: JSON.stringify({\n        email: document.getElementById(\"email\").value,\n        password: document.getElementById(\"password\").value\n      })\n    };\n    console.log('options', options); //ACA LE PEGAMOS AL BACK CON UN FETCH\n    //LE PASAMOS OPTIONS CON EL USUARIO Y LA PASS\n\n    return fetch(\"http://localhost:5000/user/login\", options).then(res => res.json()).then(res => {\n      //EN CASO QUE EL MENSAJE DE LA RESPNOSE SEA VERDADERO\n      //LE DECIMOS AL REDUCER QUE HAGA UN DISPATCH SUCCES\n      //Y TAMBIEN LE MANDAMOS DE PAYLOAD LA RESPONSE --> REDUCER\n      if (res.msg !== \"Auth failed\") {\n        console.log(res);\n        return dispatch({\n          type: LOGIN_USER_SUCCESS,\n          payload: res\n        });\n      } else {\n        return dispatch({\n          type: LOGIN_USER_ERROR,\n          payload: res.error\n        });\n      }\n    });\n  };\n};\nexport const isAuth = isAuth => {\n  return {\n    type: IS_AUTH,\n    payload: isAuth\n  };\n}; //GET USERS\n\nexport const fetchUser = () => dispatch => {\n  fetch(\"http://localhost:5000/api/user/\").then(res => res.json()).then(data => {\n    return dispatch({\n      type: FETCH_USERS,\n      payload: data\n    });\n  });\n}; //LOGOUT\n\nexport const logOut = dispatch => {\n  return {\n    type: USER_LOGOUT\n  };\n}; //POST USERS\n\nexport const postUser = user => {\n  return dispatch => {\n    dispatch({\n      type: ADD_USER_PENDING\n    });\n    const options = {\n      timeout: 25000,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(user)\n    };\n    console.log(\"options\", options);\n    return fetch(\"http://localhost:5000/user/signup\", options).then(res => res.json()).then(data => {\n      console.log(\"POST USER\", data);\n\n      if (!Object.entries(data).length) {\n        return Promise.reject(data);\n      }\n\n      return dispatch({\n        type: ADD_USER_SUCCESS,\n        payload: {\n          user: data\n        }\n      });\n    }).catch(error => {\n      return dispatch({\n        type: ADD_USER_ERROR,\n        payload: error\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/PC/Desktop/TEST-SchoolApp-FrontEnd/src/redux/actions/login.js"],"names":["ADD_USER_PENDING","ADD_USER_SUCCESS","ADD_USER_ERROR","FETCH_USERS","IS_AUTH","LOGIN_USER_PENDING","LOGIN_USER_SUCCESS","LOGIN_USER_ERROR","USER_LOGOUT","logIn","data","dispatch","type","options","timeout","method","headers","body","JSON","stringify","email","document","getElementById","value","password","console","log","fetch","then","res","json","msg","payload","error","isAuth","fetchUser","logOut","postUser","user","Object","entries","length","Promise","reject","catch"],"mappings":"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","sourcesContent":["import {\r\n  ADD_USER_PENDING,\r\n  ADD_USER_SUCCESS,\r\n  ADD_USER_ERROR,\r\n  FETCH_USERS,\r\n  IS_AUTH,\r\n  LOGIN_USER_PENDING,\r\n  LOGIN_USER_SUCCESS,\r\n  LOGIN_USER_ERROR,\r\n  USER_LOGOUT,\r\n} from \"./types\";\r\n\r\nexport const logIn = (data) => {\r\n  return (dispatch) => {\r\n    //ACA LE DECIMOS AL REDUCER QUE LE DIGA AL STORE QUE VAMOS A LOGAR --> REDUCER\r\n    dispatch({\r\n      type: LOGIN_USER_PENDING,\r\n    });\r\n    //CREAMOS UNA CONSTANTE OPTIONS, LA CUAL VA A TENER TODA LA INFO NECESARIA PARA PEGARLE A LA BASE DE DATOS\r\n    const options = {\r\n      timeout: 25000,\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      //GUARDAMOS LA CONTRASEÑA Y EL NOMBRE QUE PUSIERON EN EL FRONT ADENTRO DEL BODY DE OPTIONS\r\n      body: JSON.stringify({\r\n        email: document.getElementById(\"email\").value,\r\n        password: document.getElementById(\"password\").value,\r\n      }),\r\n    };\r\n    console.log('options', options)\r\n    //ACA LE PEGAMOS AL BACK CON UN FETCH\r\n    //LE PASAMOS OPTIONS CON EL USUARIO Y LA PASS\r\n    return fetch(\"http://localhost:5000/user/login\", options)\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        //EN CASO QUE EL MENSAJE DE LA RESPNOSE SEA VERDADERO\r\n        //LE DECIMOS AL REDUCER QUE HAGA UN DISPATCH SUCCES\r\n        //Y TAMBIEN LE MANDAMOS DE PAYLOAD LA RESPONSE --> REDUCER\r\n        if (res.msg !== \"Auth failed\") {\r\n          console.log(res);\r\n\r\n          return dispatch({\r\n            type: LOGIN_USER_SUCCESS,\r\n            payload: res,\r\n          });\r\n        } else {\r\n          return dispatch({\r\n            type: LOGIN_USER_ERROR,\r\n            payload: res.error,\r\n          });\r\n        }\r\n      });\r\n  };\r\n};\r\n\r\nexport const isAuth = (isAuth) => {\r\n  return {\r\n    type: IS_AUTH,\r\n    payload: isAuth,\r\n  };\r\n};\r\n\r\n//GET USERS\r\nexport const fetchUser = () => (dispatch) => {\r\n  fetch(\"http://localhost:5000/api/user/\")\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      return dispatch({ type: FETCH_USERS, payload: data });\r\n    });\r\n};\r\n\r\n//LOGOUT\r\nexport const logOut = (dispatch) => {\r\n  return {\r\n    type: USER_LOGOUT,\r\n  };\r\n};\r\n\r\n//POST USERS\r\nexport const postUser = (user) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: ADD_USER_PENDING,\r\n    });\r\n\r\n    const options = {\r\n      timeout: 25000,\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(user),\r\n    };\r\n    console.log(\"options\", options);\r\n    return fetch(\"http://localhost:5000/user/signup\", options)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(\"POST USER\", data);\r\n        if (!Object.entries(data).length) {\r\n          return Promise.reject(data);\r\n        }\r\n\r\n        return dispatch({\r\n          type: ADD_USER_SUCCESS,\r\n          payload: {\r\n            user: data,\r\n          },\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        return dispatch({\r\n          type: ADD_USER_ERROR,\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}