{"ast":null,"code":"import { ADD_USER_PENDING, ADD_USER_SUCCESS, ADD_USER_ERROR, FETCH_USERS, IS_AUTH, LOGIN_USER_PENDING, LOGIN_USER_SUCCESS, LOGIN_USER_ERROR, USER_LOGOUT } from './types';\nexport const logIn = data => {\n  return dispatch => {\n    //ACA LE DECIMOS AL REDUCER QUE LE DIGA AL STORE QUE VAMOS A LOGAR --> REDUCER\n    dispatch({\n      type: LOGIN_USER_PENDING\n    }); //CREAMOS UNA CONSTANTE OPTIONS, LA CUAL VA A TENER TODA LA INFO NECESARIA PARA PEGARLE A LA BASE DE DATOS\n\n    const options = {\n      timeout: 25000,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      //GUARDAMOS LA CONTRASEÑA Y EL NOMBRE QUE PUSIERON EN EL FRONT ADENTRO DEL BODY DE OPTIONS\n      body: JSON.stringify({\n        name: document.getElementById('inputName').value,\n        password: document.getElementById('inputPassword').value\n      })\n    }; //ACA LE PEGAMOS AL BACK CON UN FETCH\n    //LE PASAMOS OPTIONS CON EL USUARIO Y LA PASS\n\n    return fetch('http://localhost:5000/user/login', options).then(res => res.json()).then(res => {\n      //EN CASO QUE EL MENSAJE DE LA RESPNOSE SEA VERDADERO\n      //LE DECIMOS AL REDUCER QUE HAGA UN DISPATCH SUCCES\n      //Y TAMBIEN LE MANDAMOS DE PAYLOAD LA RESPONSE --> REDUCER\n      if (res.msg !== 'Auth failed') {\n        console.log(res);\n        return dispatch({\n          type: LOGIN_USER_SUCCESS,\n          payload: res\n        });\n      } else {\n        return dispatch({\n          type: LOGIN_USER_ERROR,\n          payload: res.error\n        });\n      }\n    });\n  };\n};\nexport const isAuth = isAuth => {\n  return {\n    type: IS_AUTH,\n    payload: isAuth\n  };\n}; //GET USERS\n\nexport const fetchUser = () => dispatch => {\n  fetch('http://localhost:5000/api/user/').then(res => res.json()).then(data => {\n    return dispatch({\n      type: FETCH_USERS,\n      payload: data\n    });\n  });\n}; //LOGOUT\n\nexport const logOut = dispatch => {\n  return {\n    type: USER_LOGOUT\n  };\n}; //POST USERS\n\nexport const postUser = user => {\n  return dispatch => {\n    dispatch({\n      type: ADD_USER_PENDING\n    });\n    const options = {\n      timeout: 25000,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    };\n    console.log('options', options);\n    return fetch(`http://localhost:5000/api/user`, options).then(res => res.json()).then(data => {\n      console.log('POST USER', data);\n\n      if (!Object.entries(data).length) {\n        return Promise.reject(data);\n      }\n\n      return dispatch({\n        type: ADD_USER_SUCCESS,\n        payload: {\n          user: data\n        }\n      });\n    }).catch(error => {\n      return dispatch({\n        type: ADD_USER_ERROR,\n        payload: error\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/IvAnJ/Desktop/Projecto/SchoolApp-FrontEnd/src/redux/actions/login.js"],"names":["ADD_USER_PENDING","ADD_USER_SUCCESS","ADD_USER_ERROR","FETCH_USERS","IS_AUTH","LOGIN_USER_PENDING","LOGIN_USER_SUCCESS","LOGIN_USER_ERROR","USER_LOGOUT","logIn","data","dispatch","type","options","timeout","method","headers","body","JSON","stringify","name","document","getElementById","value","password","fetch","then","res","json","msg","console","log","payload","error","isAuth","fetchUser","logOut","postUser","user","Object","entries","length","Promise","reject","catch"],"mappings":"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","sourcesContent":["import {\r\n    ADD_USER_PENDING,\r\n    ADD_USER_SUCCESS,\r\n    ADD_USER_ERROR,\r\n    FETCH_USERS,\r\n    IS_AUTH,\r\n    LOGIN_USER_PENDING,\r\n    LOGIN_USER_SUCCESS,\r\n    LOGIN_USER_ERROR,\r\n    USER_LOGOUT\r\n  } from './types';\r\n  \r\n  export const logIn = data => {\r\n    return dispatch => {\r\n      //ACA LE DECIMOS AL REDUCER QUE LE DIGA AL STORE QUE VAMOS A LOGAR --> REDUCER\r\n      dispatch({\r\n        type: LOGIN_USER_PENDING\r\n      });\r\n      //CREAMOS UNA CONSTANTE OPTIONS, LA CUAL VA A TENER TODA LA INFO NECESARIA PARA PEGARLE A LA BASE DE DATOS\r\n      const options = {\r\n        timeout: 25000,\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        //GUARDAMOS LA CONTRASEÑA Y EL NOMBRE QUE PUSIERON EN EL FRONT ADENTRO DEL BODY DE OPTIONS\r\n        body: JSON.stringify({\r\n          name: document.getElementById('inputName').value,\r\n          password: document.getElementById('inputPassword').value\r\n        })\r\n      };\r\n      \r\n      //ACA LE PEGAMOS AL BACK CON UN FETCH\r\n      //LE PASAMOS OPTIONS CON EL USUARIO Y LA PASS\r\n      return fetch('http://localhost:5000/user/login', options)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          //EN CASO QUE EL MENSAJE DE LA RESPNOSE SEA VERDADERO\r\n          //LE DECIMOS AL REDUCER QUE HAGA UN DISPATCH SUCCES\r\n          //Y TAMBIEN LE MANDAMOS DE PAYLOAD LA RESPONSE --> REDUCER\r\n          if (res.msg !== 'Auth failed') {\r\n            console.log(res);\r\n  \r\n            return dispatch({\r\n              type: LOGIN_USER_SUCCESS,\r\n              payload: res\r\n            });\r\n          } else {\r\n            return dispatch({\r\n              type: LOGIN_USER_ERROR,\r\n              payload: res.error\r\n            });\r\n          }\r\n        });\r\n    };\r\n  };\r\n\r\n  \r\n  export const isAuth = isAuth => {\r\n    return {\r\n      type: IS_AUTH,\r\n      payload: isAuth\r\n    };\r\n  };\r\n  \r\n  //GET USERS\r\n  export const fetchUser = () => dispatch => {\r\n    fetch('http://localhost:5000/api/user/')\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        return dispatch({ type: FETCH_USERS, payload: data });\r\n      });\r\n  };\r\n  \r\n  //LOGOUT\r\n  export const logOut = dispatch => {\r\n    return {\r\n      type: USER_LOGOUT\r\n    };\r\n  };\r\n  \r\n  //POST USERS\r\n  export const postUser = user => {\r\n    return dispatch => {\r\n      dispatch({\r\n        type: ADD_USER_PENDING\r\n      });\r\n  \r\n      const options = {\r\n        timeout: 25000,\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(user)\r\n      };\r\n      console.log('options', options);\r\n      return fetch(`http://localhost:5000/api/user`, options)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          console.log('POST USER', data);\r\n          if (!Object.entries(data).length) {\r\n            return Promise.reject(data);\r\n          }\r\n  \r\n          return dispatch({\r\n            type: ADD_USER_SUCCESS,\r\n            payload: {\r\n              user: data\r\n            }\r\n          });\r\n        })\r\n        .catch(error => {\r\n          return dispatch({\r\n            type: ADD_USER_ERROR,\r\n            payload: error\r\n          });\r\n        });\r\n    };\r\n  };"]},"metadata":{},"sourceType":"module"}