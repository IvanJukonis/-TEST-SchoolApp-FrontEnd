{"ast":null,"code":"import { FETCH_QUALIFICATION, ADD_QUALIFICATION_PENDING, ADD_QUALIFICATION_SUCCESS, ADD_QUALIFICATION_ERROR, UPDATE_QUALIFICATION_PENDING, UPDATE_QUALIFICATION_SUCCESS, UPDATE_QUALIFICATION_ERROR, DELETE_QUALIFICATION_PENDING, DELETE_QUALIFICATION_SUCCESS, DELETE_QUALIFICATION_ERROR } from \"./types\";\nimport store from \"../store/store\"; //#region GET QUALIFICATIONS\n\nexport const fetchQualifications = () => dispatch => {\n  fetch(\"http://localhost:5000/api/qualifications\").then(response => response.json()).then(data => {\n    console.log(data);\n    return dispatch({\n      type: FETCH_QUALIFICATION,\n      payload: data\n    });\n  });\n}; //#endregion\n//#region POST QUALIFICATION\n\nexport const postQualification = qualification => {\n  return dispatch => {\n    dispatch({\n      type: ADD_QUALIFICATION_PENDING\n    }); //CombineTools allow us to get the users\n\n    const {\n      token\n    } = store.getState().users;\n    const request = {\n      timeout: 25000,\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        authorization: `BEARER ${token}`\n      },\n      body: JSON.stringify(qualification)\n    };\n    return fetch(`http://localhost:5000/api/qualifications`, request).then(response => response.json()).then(data => {\n      if (!Object.entries(data).length) {\n        return Promise.reject(data);\n      }\n\n      return dispatch({\n        type: ADD_QUALIFICATION_SUCCESS,\n        payload: {\n          qualification: data.createdQualification\n        }\n      });\n    }).catch(error => {\n      return dispatch({\n        type: ADD_QUALIFICATION_ERROR,\n        payload: error\n      });\n    });\n  };\n}; //#endregion\n//#region UPDATE QUALIFICATIONS\n\nexport const updateQualification = qualification => {\n  console.log(qualification);\n  return dispatch => {\n    dispatch({\n      type: UPDATE_QUALIFICATION_PENDING\n    });\n    const options = {\n      timeout: 25000,\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        qualification\n      })\n    };\n    return fetch(`http://localhost:5000/api/qualifications/${qualification._id}`, options).then(response => response.json()).then(data => {\n      if (!Object.entries(data).length) {\n        return Promise.reject(data);\n      }\n\n      return dispatch({\n        type: UPDATE_QUALIFICATION_SUCCESS,\n        payload: data\n      });\n    }).catch(error => {\n      return dispatch({\n        type: UPDATE_QUALIFICATION_ERROR,\n        payload: error\n      });\n    });\n  };\n}; //#endregion\n//#region DELETE QUALIFICATION\n\nexport const deleteQualification = code => {\n  return dispatch => {\n    dispatch({\n      type: DELETE_QUALIFICATION_PENDING\n    });\n    const options = {\n      timeout: 25000,\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    return fetch(`http://localhost:5000/api/qualifications/${code}`, options).then(response => response.json()).then(data => {\n      if (!Object.entries(data).length) {\n        return Promise.reject(data);\n      }\n\n      return dispatch({\n        type: DELETE_QUALIFICATION_SUCCESS,\n        payload: data\n      });\n    }).catch(error => {\n      return dispatch({\n        type: DELETE_QUALIFICATION_ERROR,\n        payload: error\n      });\n    });\n  };\n}; //#endregion","map":{"version":3,"sources":["C:/Users/santi/Desktop/Programacion/SchoolApp-FrontEnd/src/redux/actions/qualification.js"],"names":["FETCH_QUALIFICATION","ADD_QUALIFICATION_PENDING","ADD_QUALIFICATION_SUCCESS","ADD_QUALIFICATION_ERROR","UPDATE_QUALIFICATION_PENDING","UPDATE_QUALIFICATION_SUCCESS","UPDATE_QUALIFICATION_ERROR","DELETE_QUALIFICATION_PENDING","DELETE_QUALIFICATION_SUCCESS","DELETE_QUALIFICATION_ERROR","store","fetchQualifications","dispatch","fetch","then","response","json","data","console","log","type","payload","postQualification","qualification","token","getState","users","request","timeout","method","headers","authorization","body","JSON","stringify","Object","entries","length","Promise","reject","createdQualification","catch","error","updateQualification","options","_id","deleteQualification","code"],"mappings":"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","sourcesContent":["import {\r\n  FETCH_QUALIFICATION,\r\n  ADD_QUALIFICATION_PENDING,\r\n  ADD_QUALIFICATION_SUCCESS,\r\n  ADD_QUALIFICATION_ERROR,\r\n  UPDATE_QUALIFICATION_PENDING,\r\n  UPDATE_QUALIFICATION_SUCCESS,\r\n  UPDATE_QUALIFICATION_ERROR,\r\n  DELETE_QUALIFICATION_PENDING,\r\n  DELETE_QUALIFICATION_SUCCESS,\r\n  DELETE_QUALIFICATION_ERROR,\r\n} from \"./types\";\r\n\r\nimport store from \"../store/store\";\r\n\r\n//#region GET QUALIFICATIONS\r\nexport const fetchQualifications = () => (dispatch) => {\r\n  fetch(\"http://localhost:5000/api/qualifications\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      console.log(data);\r\n      return dispatch({\r\n        type: FETCH_QUALIFICATION,\r\n        payload: data,\r\n      });\r\n    });\r\n};\r\n//#endregion\r\n//#region POST QUALIFICATION\r\nexport const postQualification = (qualification) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: ADD_QUALIFICATION_PENDING,\r\n    });\r\n    //CombineTools allow us to get the users\r\n    const { token } = store.getState().users;\r\n    const request = {\r\n      timeout: 25000,\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        authorization: `BEARER ${token}`,\r\n      },\r\n      body: JSON.stringify(qualification),\r\n    };\r\n    return fetch(`http://localhost:5000/api/qualifications`, request)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (!Object.entries(data).length) {\r\n          return Promise.reject(data);\r\n        }\r\n        return dispatch({\r\n          type: ADD_QUALIFICATION_SUCCESS,\r\n          payload: {\r\n            qualification: data.createdQualification,\r\n          },\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        return dispatch({\r\n          type: ADD_QUALIFICATION_ERROR,\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\n//#endregion\r\n//#region UPDATE QUALIFICATIONS\r\nexport const updateQualification = (qualification) => {\r\n  console.log(qualification);\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: UPDATE_QUALIFICATION_PENDING,\r\n    });\r\n    const options = {\r\n      timeout: 25000,\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ qualification }),\r\n    };\r\n    return fetch(\r\n      `http://localhost:5000/api/qualifications/${qualification._id}`,\r\n      options\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (!Object.entries(data).length) {\r\n          return Promise.reject(data);\r\n        }\r\n\r\n        return dispatch({\r\n          type: UPDATE_QUALIFICATION_SUCCESS,\r\n          payload: data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        return dispatch({\r\n          type: UPDATE_QUALIFICATION_ERROR,\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\n//#endregion\r\n//#region DELETE QUALIFICATION\r\nexport const deleteQualification = (code) => {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: DELETE_QUALIFICATION_PENDING,\r\n    });\r\n    const options = {\r\n      timeout: 25000,\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    return fetch(`http://localhost:5000/api/qualifications/${code}`, options)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (!Object.entries(data).length) {\r\n          return Promise.reject(data);\r\n        }\r\n        return dispatch({\r\n          type: DELETE_QUALIFICATION_SUCCESS,\r\n          payload: data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        return dispatch({\r\n          type: DELETE_QUALIFICATION_ERROR,\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\n//#endregion\r\n"]},"metadata":{},"sourceType":"module"}